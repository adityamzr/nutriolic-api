datasource db {
  provider = "postgresql"
  url      = process.env.DATABASE_URL
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int       @id @default(autoincrement())
  username  String    
  class     String?
  is_admin  Boolean
  progress  Int?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  onboarding         Onboarding[]
  quiz_responses     QuizResponse[]
  nutrisi_responses  NutrisiResponse[]
  kalori_responses   KaloriResponse[]
  gizi_responses     GiziResponse[]
  piringku_responses PiringkuResponse[]
  Reflection Reflection[]
  Game Game[]
}

model Question {
  id         Int       @id @default(autoincrement())
  code       String
  category   String
  question   String
  answer     String
  explaination     String
  img_path   String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
}

model Onboarding {
  id         Int      @id @default(autoincrement())
  user_id    Int
  response   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model QuizResponse {
  id         Int      @id @default(autoincrement())
  user_id    Int
  question_id Int
  response   String
  score      Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User     @relation(fields: [user_id], references: [id])
}

model NutrisiResponse {
  id         Int      @id @default(autoincrement())
  user_id    Int
  q1         String?
  q2         String?
  q3         String?
  carbs      String?
  proteins   String?
  fats       String?
  vitamins   String?
  minerals   String?
  p4         String?
  p5         String?
  p6         String?
  p7         String?
  p8         String?
  a1         String?
  a2         String?
  a3         String?
  conclusion String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model KaloriResponse {
  id          Int      @id @default(autoincrement())
  user_id     Int
  q1          String?
  q2          String?
  activities  Json?
  q3          String?
  q4          String?
  q5          String?
  food_items  Json?
  q6          String?
  p4          String?
  p5          String?
  p6          String?
  p7          String?
  p8          String?
  conclusion  String?
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model GiziResponse {
  id         Int      @id @default(autoincrement())
  user_id    Int
  q1         String?
  q2         String?
  q3         String?
  p4         String?
  p5         String?
  p6         String?
  p7         String?
  p8         String?
  conclusion String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model PiringkuResponse {
  id         Int      @id @default(autoincrement())
  user_id    Int
  q1         String?
  q2         String?
  q3         String?
  p4         String?
  p5         String?
  p6         String?
  p7         String?
  p8         String?
  a1         String?
  a2         String?
  a3         String?
  a4         String?
  conclusion String?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model Reflection {
  id         Int      @id @default(autoincrement())
  user_id    Int
  pesan   String
  kesan   String
  saran   String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}

model Game {
  id         Int      @id @default(autoincrement())
  user_id    Int
  bmi   Float?
  little_plate   Json?
  big_plate   Json?
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id])
}
